{"name":"Active configuration","body":"ActiveConfiguration is an engine that exposes a generic settings store to \r\nActiveRecord models. Made for very configurable applications, it allows you \r\nto avoid implementing specific ways to store settings for each model that \r\nneeds such a configuration. If your application isn't very configurable, \r\nActiveConfiguration isn't what you want.\r\n\r\nIf you had a `Category` model that only had a configurable `sort` attribute, \r\nActiveConfiguration would be overkill. Rather, you would just read and write \r\nvalues using a specific `sort` column and restrict the allowed values using \r\nsomething like `validates_inclusion_of`.\r\n\r\nHowever, if your `Category` model was more flexible in its configuration, you \r\nmay want a `sort` setting, a `limit` setting and multiple `price_filter` \r\nsettings that can be configured by your end user. Without ActiveConfiguration, \r\nyou would have to develop a way to store and validate these settings for this \r\nspecific scenario. The `sort` and `limit` settings are simple but because \r\n`price_filter` can accept multiple rules, you'd have to set up an additional \r\nmodel. Still, this isn't really an issue when you're dealing with just a single \r\nconfigurable model. When you're dealing with many, things tend to get messy.\r\n\r\nWith ActiveConfiguration, all of your settings, even for `price_filter`, can \r\nbe stored in a generic way. ActiveConfiguration provides a place to store \r\nsettings for each of your models and even handles validation when you restrict \r\nthe allowed values or format of an option.\r\n\r\n## Source\r\n\r\nThe source for this engine is located at:\r\n\r\n\thttp://github.com/tsmango/active_configuration\r\n\r\n## Installation\r\n\r\nAdd the following to your Gemfile:\r\n\r\n\tgem 'active_configuration'\r\n\r\nGenerate the migration for the `settings` table:\r\n\r\n\trails g active_configuration:install\r\n\r\nNote: The table can be changed from `settings` to something else by specifying \r\na config option in an initializer like:\r\n\r\n\t# config/initializers/active_configuration.rb\r\n\t\r\n\tRails.configuration.active_configuration_table_name = 'active_configuration_settings'\r\n\r\nMigrate your database:\r\n\r\n\trake db:migrate\r\n\r\n## Example Configuration\r\n\r\n\tclass Category < ActiveRecord::Base\r\n\t\tconfigure do\r\n\t\t\toption :sort do\r\n\t\t\t\tdefault  'alphabetical'\r\n\t\t\t\trestrict 'alphabetical', 'manual'\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\toption :limit do\r\n\t\t\t\tformat 'fixnum'\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\toption :price_filter do\r\n\t\t\t\tformat    'float'\r\n\t\t\t\tmodifiers 'eq', 'lt', 'gt', 'lte', 'gte'\r\n\t\t\t\tmultiple  true\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\r\nAfter installing ActiveConfiguration, the #configure block is available to \r\nevery ActiveRecord model. If the #configure block is defined with a valid \r\nconfiguration, additional methods are made available on the model.\r\n\r\n## Example Usage\r\n\r\nGiven we have defined the `Category` class above, instances will now have a #settings \r\nmethod where settings can be read from and written to.\r\n\r\n\t>> category = Category.create(:name => 'Vinyl Records')\r\n\t=> #<Category id: 1, name: \"Vinyl Records\", created_at: \"2011-08-03 15:46:11\", updated_at: \"2011-08-03 15:46:11\">\r\n\t\r\n\t?> category.settings\r\n\t=> #<ActiveConfiguration::SettingManager:0x10e7d1950 @configurable=#<Category id: 1, name: \"Vinyl Records\", created_at: \"2011-08-03 15:46:11\", updated_at: \"2011-08-03 15:46:11\">>\r\n\t\r\n\t?> category.settings[:sort]\r\n\t=> {:value=>\"alphabetical\", :modifier=>nil}\r\n\t\r\n\t?> category.settings[:sort][:value]\r\n\t=> \"alphabetical\"\r\n\t\r\n\t?> category.settings[:sort][:value] = 'manual'\r\n\t=> \"manual\"\r\n\t\r\n\t?> category.settings[:price_filter]\r\n\t=> []\r\n\t\r\n\t?> category.settings[:price_filter] = [{:modifier => 'gt', :value => 10.00}, {:modifier => 'lte', :value => 25.00}]\r\n\t=> [{:value=>10.0, :modifier=>\"gt\"}, {:value=>25.0, :modifier=>\"lte\"}]\r\n\t\r\n\t?> category.save\r\n\t=> true\r\n\t\r\n\t?> category.settings[:sort][:value]\r\n\t=> \"manual\"\r\n\t\r\n\t?> category.settings[:price_filter]\r\n\t=> [{:value=>10.0, :modifier=>\"gt\"}, {:value=>25.0, :modifier=>\"lte\"}]\r\n\r\nNote:\r\n\r\nSettings are only committed after a `save` of the configurable model. If any \r\nvalidation errors should arise, the `save` on the model will return false and \r\nerrors will be added to the model's errors collection.\r\n\r\n## Testing Environment\r\n\r\nThe spec/ directory contains a skeleton Rails 3.0.0 application for testing \r\npurposes. All specs can be found in spec/spec/.\r\n\r\nTo run the specs, do the following from the root of active\\_configuration:\r\n\r\n\tbundle install --path=vendor/bundles --binstubs\r\n\tbin/rspec spec\r\n\r\n## License\r\n\r\nCopyright &copy; 2011 Thomas Mango, released under the MIT license.","tagline":"A generic settings store for Rails 3.x ActiveRecord models.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}